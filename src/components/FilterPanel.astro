---
import { getAllAuthors, getAllGenres, getAllSubGenres, getAllImprints } from '../utils/dataHelpers.js';

const authors = getAllAuthors();
const genres = getAllGenres();
const subGenres = getAllSubGenres();
const imprints = getAllImprints();
---

<div class="filter-panel">
  <div class="filter-controls">
    <div class="filter-group">
      <label for="genre-filter">Genre:</label>
      <select id="genre-filter" class="filter-select">
        <option value="">All Genres</option>
        {genres.map(genre => (
          <option value={genre.code}>{genre.name}</option>
        ))}
      </select>
    </div>

    <div class="filter-group">
      <label for="subgenre-filter">Sub-Genre:</label>
      <select id="subgenre-filter" class="filter-select">
        <option value="">All Sub-Genres</option>
        {subGenres.map(subGenre => (
          <option value={subGenre.code}>{subGenre.name}</option>
        ))}
      </select>
    </div>

    <div class="filter-group">
      <label for="author-filter">Author:</label>
      <select id="author-filter" class="filter-select">
        <option value="">All Authors</option>
        {authors.map(author => (
          <option value={author.id}>{author.name}</option>
        ))}
      </select>
    </div>

    <div class="filter-group">
      <label for="imprint-filter">Imprint:</label>
      <select id="imprint-filter" class="filter-select">
        <option value="">All Imprints</option>
        {imprints.map(imprint => (
          <option value={imprint.name}>{imprint.name}</option>
        ))}
      </select>
    </div>

    <div class="filter-group">
      <label for="sort-select">Sort by:</label>
      <select id="sort-select" class="filter-select">
        <option value="title">Title A-Z</option>
        <option value="author">Author</option>
        <option value="year">Publication Year</option>
        <option value="imprint">Imprint</option>
      </select>
    </div>

    <button id="clear-filters" class="clear-filters-btn">Clear All Filters</button>
  </div>

  <div class="results-info">
    <span id="results-count">Loading...</span>
  </div>
</div>

<script>
  const genreFilter = document.getElementById('genre-filter') as HTMLSelectElement;
  const subGenreFilter = document.getElementById('subgenre-filter') as HTMLSelectElement;
  const authorFilter = document.getElementById('author-filter') as HTMLSelectElement;
  const imprintFilter = document.getElementById('imprint-filter') as HTMLSelectElement;
  const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
  const clearFiltersBtn = document.getElementById('clear-filters') as HTMLButtonElement;

  function applyFilters() {
    const selectedGenre = genreFilter.value;
    const selectedSubGenre = subGenreFilter.value;
    const selectedAuthor = authorFilter.value;
    const selectedImprint = imprintFilter.value;
    const books = document.querySelectorAll('.book-card');
    
    books.forEach(book => {
      const bookEl = book as HTMLElement;
      let shouldShow = true;
      
      // Genre filter
      if (selectedGenre) {
        const genreBadge = book.querySelector('.genre-badge')?.textContent || '';
        const genre = genreBadge.trim();
        const selectedGenreName = genreFilter.options[genreFilter.selectedIndex]?.textContent || '';
        if (genre !== selectedGenreName) {
          shouldShow = false;
        }
      }
      
      // Sub-genre filter
      if (selectedSubGenre && shouldShow) {
        const subGenreBadge = book.querySelector('.subgenre-badge')?.textContent || '';
        const subGenre = subGenreBadge.trim();
        const selectedSubGenreName = subGenreFilter.options[subGenreFilter.selectedIndex]?.textContent || '';
        if (subGenre !== selectedSubGenreName) {
          shouldShow = false;
        }
      }
      
      // Author filter
      if (selectedAuthor && shouldShow) {
        const authorName = book.querySelector('.book-author')?.textContent || '';
        const selectedAuthorName = authorFilter.options[authorFilter.selectedIndex]?.textContent || '';
        if (!authorName.includes(selectedAuthorName)) {
          shouldShow = false;
        }
      }

      // Imprint filter
      if (selectedImprint && shouldShow) {
        const imprintBadge = book.querySelector('.imprint-badge')?.textContent || '';
        const imprint = imprintBadge.trim();
        if (imprint !== selectedImprint) {
          shouldShow = false;
        }
      }
      
      bookEl.style.display = shouldShow ? 'block' : 'none';
    });

    updateResultsCount();
    applySorting();
  }

  function applySorting() {
    const sortBy = sortSelect.value;
    const bookGrid = document.querySelector('.book-grid');
    const books = Array.from(document.querySelectorAll('.book-card'));
    
    const visibleBooks = books.filter(book => 
      (book as HTMLElement).style.display !== 'none'
    );

    visibleBooks.sort((a, b) => {
      if (sortBy === 'title') {
        const titleA = a.querySelector('.book-title')?.textContent || '';
        const titleB = b.querySelector('.book-title')?.textContent || '';
        return titleA.localeCompare(titleB);
      } else if (sortBy === 'author') {
        const authorA = a.querySelector('.book-author')?.textContent || '';
        const authorB = b.querySelector('.book-author')?.textContent || '';
        return authorA.localeCompare(authorB);
      } else if (sortBy === 'year') {
        const yearA = a.querySelector('.publication-year')?.textContent || '';
        const yearB = b.querySelector('.publication-year')?.textContent || '';
        return yearB.localeCompare(yearA); // Newest first
      } else if (sortBy === 'imprint') {
        const imprintA = a.querySelector('.imprint-badge')?.textContent || '';
        const imprintB = b.querySelector('.imprint-badge')?.textContent || '';
        return imprintA.localeCompare(imprintB);
      }
      return 0;
    });

    // Reorder visible books in the DOM
    visibleBooks.forEach(book => {
      bookGrid?.appendChild(book);
    });
  }

  function updateResultsCount() {
    const visibleBooks = document.querySelectorAll('.book-card[style*="block"], .book-card:not([style*="none"])');
    const resultsCountEl = document.getElementById('results-count');
    if (resultsCountEl) {
      resultsCountEl.textContent = `${visibleBooks.length} books found`;
    }
  }

  function clearAllFilters() {
    genreFilter.value = '';
    subGenreFilter.value = '';
    authorFilter.value = '';
    imprintFilter.value = '';
    sortSelect.value = 'title';
    
    const books = document.querySelectorAll('.book-card');
    books.forEach(book => {
      (book as HTMLElement).style.display = 'block';
    });
    
    updateResultsCount();
    applySorting();
  }

  genreFilter.addEventListener('change', applyFilters);
  subGenreFilter.addEventListener('change', applyFilters);
  authorFilter.addEventListener('change', applyFilters);
  imprintFilter.addEventListener('change', applyFilters);
  sortSelect.addEventListener('change', applySorting);
  clearFiltersBtn.addEventListener('click', clearAllFilters);

  // Initial setup
  document.addEventListener('DOMContentLoaded', () => {
    updateResultsCount();
  });
</script>

<style>
  .filter-panel {
    background: #f8f8f8;
    padding: 1.5rem;
    border-radius: 4px;
    margin-bottom: 1.5rem;
    border: 1px solid #cccccc;
  }

  .filter-controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 0.75rem;
    align-items: end;
    margin-bottom: 1rem;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    color: #000000;
    font-weight: bold;
    font-size: 0.85rem;
  }

  .filter-select {
    padding: 0.4rem;
    border: 1px solid #cccccc;
    border-radius: 4px;
    background: #ffffff;
    color: #000000;
    font-family: 'Georgia', serif;
    font-size: 0.9rem;
  }

  .filter-select:focus {
    outline: none;
    border-color: #000000;
  }

  .clear-filters-btn {
    padding: 0.4rem 0.8rem;
    background: #000000;
    color: #ffffff;
    border: none;
    border-radius: 4px;
    font-weight: bold;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .clear-filters-btn:hover {
    background: #333333;
  }

  .results-info {
    text-align: center;
    color: #666666;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .filter-controls {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .filter-panel {
      padding: 1rem;
    }
  }
</style>